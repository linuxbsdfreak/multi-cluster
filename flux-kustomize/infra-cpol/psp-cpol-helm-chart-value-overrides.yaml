# -- Policy kind (`ClusterPolicy`, `Policy`)
# Set to `Policy` if you need namespaced policies and not cluster policies
policyKind: ClusterPolicy

# -- Pod Security Standard profile (`baseline`, `restricted`, `privileged`, `custom`).
# For more info https://kyverno.io/policies/pod-security.
podSecurityStandard: baseline

# -- Pod Security Standard (`low`, `medium`, `high`).
podSecuritySeverity: medium

# -- Policies to include when `podSecurityStandard` is `custom`.
podSecurityPolicies: []

# -- Additional policies to include from `other`.
includeOtherPolicies: []
# - require-non-root-groups

# -- Additional policies to include from `restricted`.
includeRestrictedPolicies: []
# - require-run-as-non-root-user

# -- Additional custom policies to include.
customPolicies:
  - apiVersion: kyverno.io/v1
    kind: ClusterPolicy
    metadata:
      name: generate-namespaced-resources
    spec:
      rules:
        - name: generate-service-account
          match:
            any:
            - resources:
                kinds:
                  - Namespace
          generate:
            generateExisting: true
            apiVersion: v1
            kind: ServiceAccount
            name: "{{`{{request.object.metadata.name}}`}}-kyma-sa"
            synchronize: true
            data:
              metadata:
                labels:
                  created-by: kyverno
        - name: generate-secret
          match:
            any:
            - resources:
                kinds:
                  - Namespace
          generate:
            generateExisting: true
            apiVersion: v1
            kind: Secret
            name: "{{`{{request.object.metadata.name}}`}}-kyma-sa-secret"
            namespace: "{{`{{request.object.metadata.name}}`}}"
            synchronize: true
            data:
              metadata:
                labels:
                  created-by: kyverno
                annotations:
                  kubernetes.io/service-account.name: "{{`{{request.object.metadata.name}}`}}-kyma-sa"
              type: kubernetes.io/service-account-token
        - name: generate-role
          match:
            any:
            - resources:
                kinds:
                  - Namespace
          generate:
            generateExisting: true
            apiVersion: rbac.authorization.k8s.io/v1
            kind: Role
            name: "{{`{{request.object.metadata.name}}`}}-kyma-role"
            namespace: "{{`{{request.object.metadata.name}}`}}"
            synchronize: true
            data:
              metadata:
                labels:
                  created-by: kyverno
              rules:
              - apiGroups:
                - ""
                - extensions
                - batch
                - apps
                - gateway.kyma-project.io
                - servicecatalog.k8s.io
                resources:
                - deployments
                - replicasets
                - pods
                - jobs
                - configmaps
                - apirules
                - serviceinstances
                - servicebindings
                - services
                - secrets
                verbs:
                - create
                - update
                - patch
                - delete
                - get
                - list
        - name: generate-rolebinding
          match:
            any:
            - resources:
                kinds:
                  - Namespace
          generate:
            generateExisting: true
            kind: RoleBinding
            apiVersion: rbac.authorization.k8s.io/v1
            name: "{{`{{request.object.metadata.name}}`}}-kyma-role-binding"
            namespace: "{{`{{request.object.metadata.name}}`}}"
            data:
              metadata:
                labels:
                  created-by: kyverno
              subjects:
                - kind: ServiceAccount
                  name: "{{`{{request.object.metadata.name}}`}}-kyma-sa"
                  namespace: "{{`{{request.object.metadata.name}}`}}"
              roleRef:
                kind: Role
                name: "{{`{{request.object.metadata.name}}`}}-kyma-role"
                apiGroup: rbac.authorization.k8s.io
        - name: generate-configmap
          match:
            any:
            - resources:
                kinds:
                  - Namespace
          generate:
            generateExisting: true
            kind: ConfigMap
            apiVersion: v1
            name: kubeconfig-script
            namespace: "{{`{{request.object.metadata.name}}`}}"
            synchronize: true
            data:
              metadata:
                labels:
                  created-by: kyverno
              data:
                script.sh: |
                  #!/bin/bash
                  set -e

                  # Variables
                  NAMESPACE={{`{{request.object.metadata.name}}`}}
                  SECRET_NAME={{`{{request.object.metadata.name}}`}}-kyma-sa-secret
                  KUBECONFIG_SECRET_NAME={{`{{request.object.metadata.name}}`}}-kyma-sa-kubeconfig

                  # Get the API server URL
                  API_SERVER_URL="https://${KUBERNETES_SERVICE_HOST}:${KUBERNETES_SERVICE_PORT}"

                  # Get the CA certificate and token from the service account secret
                  CA=$(kubectl get secret/${SECRET_NAME} -n $NAMESPACE -o jsonpath='{.data.ca\.crt}')
                  TOKEN=$(kubectl get secret/${SECRET_NAME} -n $NAMESPACE -o jsonpath='{.data.token}' | base64 --decode)

                  echo "Namespace: $NAMESPACE"
                  echo "SA Secret name: $SECRET_NAME"
                  echo "Kubeconfig secret: $KUBECONFIG_SECRET_NAME"
                  echo "API Server URL: $API_SERVER_URL"
                  # Generate the kubeconfig content
                  KUBECONFIG_CONTENT=$(cat <<EOF
                  apiVersion: v1
                  kind: Config
                  clusters:
                    - name: default-cluster
                      cluster:
                        certificate-authority-data: ${CA}
                        server: ${API_SERVER_URL}
                  users:
                    - name: default-user
                      user:
                        token: ${TOKEN}
                  contexts:
                    - name: default-context
                      context:
                        cluster: default-cluster
                        namespace: $NAMESPACE
                        user: default-user
                  current-context: default-context
                  EOF
                  )

                  # Create a Kubernetes secret with the kubeconfig
                  kubectl create secret generic ${KUBECONFIG_SECRET_NAME} -n ${NAMESPACE} \
                    --from-literal=kubeconfig="${KUBECONFIG_CONTENT}" \
                    --dry-run=client -o yaml | kubectl apply -f -

                  echo "Kubeconfig secret '${KUBECONFIG_SECRET_NAME}' created in namespace '${NAMESPACE}'."
        - name: generate-job
          match:
            any:
            - resources:
                kinds:
                  - Namespace
          generate:
            generateExisting: true
            apiVersion: batch/v1
            kind: Job
            name: "{{`{{request.object.metadata.name}}`}}-kyma-create-kubeconfig"
            namespace: "{{`{{request.object.metadata.name}}`}}"
            synchronize: true
            data:
              metadata:
                labels:
                  created-by: kyverno
              spec:
                template:
                  spec:
                    serviceAccountName: "{{`{{request.object.metadata.name}}`}}-kyma-sa"
                    containers:
                      - name: kubeconfig-generator
                        image: bitnami/kubectl:1.31.4
                        command: ["/bin/bash", "/scripts/script.sh"]
                        volumeMounts:
                          - name: script-volume
                            mountPath: /scripts
                        resources:
                          requests:
                            memory: "32Mi"
                            cpu: "10m"
                          limits:
                            memory: "64Mi"
                            cpu: "1"
                    restartPolicy: Never
                    volumes:
                      - name: script-volume
                        configMap:
                          name: kubeconfig-script
                          defaultMode: 0755
  - apiVersion: kyverno.io/v1
    kind: ClusterPolicy
    metadata:
      name: generate-eso-vault-jwt-resources
    spec:
      rules:
        - name: generate-eso-vault-sa
          match:
            any:
            - resources:
                kinds:
                  - Namespace
                selector:
                  matchExpressions:
                  - key: kubernetes.io/metadata.name
                    operator: In
                    values:
                    - eso
          generate:
            generateExisting: true
            apiVersion: v1
            kind: ServiceAccount
            name: "{{`{{request.object.metadata.name}}`}}-vault-sa"
            namespace: "{{`{{request.object.metadata.name}}`}}"
            synchronize: true
            data:
              metadata:
                labels:
                  created-by: kyverno
        - name: generate-eso-vault-cluster-role
          match:
            any:
            - resources:
                kinds:
                  - Namespace
                selector:
                  matchExpressions:
                  - key: kubernetes.io/metadata.name
                    operator: In
                    values:
                    - eso
          generate:
            generateExisting: true
            apiVersion: rbac.authorization.k8s.io/v1
            kind: Role
            name: "{{`{{request.object.metadata.name}}`}}-vault-clusterrole"
            namespace: "{{`{{request.object.metadata.name}}`}}"
            synchronize: true
            data:
              metadata:
                labels:
                  created-by: kyverno
              rules:
              - apiGroups:
                - ""
                resources:
                - secrets
                verbs:
                - create
                - update
                - patch
                - delete
                - get
                - list
        - name: generate-eso-vault-cluster-role-binding
          match:
            any:
            - resources:
                kinds:
                  - Namespace
                selector:
                  matchExpressions:
                  - key: kubernetes.io/metadata.name
                    operator: In
                    values:
                    - eso
          generate:
            generateExisting: true
            kind: RoleBinding
            apiVersion: rbac.authorization.k8s.io/v1
            name: "{{`{{request.object.metadata.name}}`}}-vault-role-binding"
            namespace: "{{`{{request.object.metadata.name}}`}}"
            synchronize: true
            data:
              metadata:
                labels:
                  created-by: kyverno
              subjects:
                - kind: ServiceAccount
                  name: "{{`{{request.object.metadata.name}}`}}-vault-sa"
                  namespace: "{{`{{request.object.metadata.name}}`}}"
              roleRef:
                kind: ClusterRole
                name: "{{`{{request.object.metadata.name}}`}}-vault-clusterrole"
                apiGroup: rbac.authorization.k8s.io
        - name: generate-refresh-jwt-token-job
          match:
            any:
            - resources:
                kinds:
                  - Namespace
                selector:
                  matchExpressions:
                  - key: kubernetes.io/metadata.name
                    operator: In
                    values:
                    - eso
          generate:
            generateExisting: true
            apiVersion: batch/v1
            kind: CronJob
            name: "{{`{{request.object.metadata.name}}`}}-vault-refresh-jwt-token"
            namespace: "{{`{{request.object.metadata.name}}`}}"
            synchronize: true
            data:
              metadata:
                labels:
                  created-by: kyverno
              spec:
                schedule: "*/55 * * * *"                   # "*/55 * * * *" every 55 minutes
                jobTemplate:
                  spec:
                    template:
                      spec:
                        serviceAccountName: "{{`{{request.object.metadata.name}}`}}-vault-sa"
                        containers:
                          - name: refresh-jwt
                            image: linuxbsdfreak/utils:v1
                            resources:
                              requests:
                                memory: "32Mi"
                                cpu: "10m"
                              limits:
                                memory: "64Mi"
                                cpu: "1"
                            env:
                              - name: CLIENT_ID
                                valueFrom:
                                  secretKeyRef:
                                    name: idp-credentials
                                    key: client_id
                              - name: CLIENT_SECRET
                                valueFrom:
                                  secretKeyRef:
                                    name: idp-credentials
                                    key: client_secret
                              - name: IDP_URL
                                valueFrom:
                                  secretKeyRef:
                                    name: idp-credentials
                                    key: idp_url
                            args:
                              - /bin/sh
                              - -c
                              - |
                                TOKEN=$(curl --location --request POST "${IDP_URL}/oauth2/token" \
                                --header "Content-Type: application/x-www-form-urlencoded" \
                                --data-urlencode "grant_type=client_credentials" \
                                --data-urlencode "client_id=${CLIENT_ID}" \
                                --data-urlencode "client_secret=${CLIENT_SECRET}" | jq -r .access_token)
                                
                                echo "$TOKEN"

                                kubectl create secret generic -n external-secrets jwt-token \
                                --from-literal=token="$TOKEN" \
                                --dry-run=client -o yaml | kubectl apply -f -
                        restartPolicy: OnFailure
  - apiVersion: kyverno.io/v1
    kind: ClusterPolicy
    metadata:
      name: require-requests-limits
    spec:
      validationFailureAction: Audit
      background: true
      rules:
      - name: validate-resources
        match:
          any:
          - resources:
              kinds:
              - Pod
        validate:
          message: "CPU and memory resource requests and limits are required."
          pattern:
            spec:
              containers:
              - resources:
                  requests:
                    memory: "?*"
                    cpu: "?*"
                  limits:
                    memory: "?*"
              initContainers:
              - resources:
                  requests:
                    memory: "?*"
                    cpu: "?*"
                  limits:
                    memory: "?*"
              ephemeralContainers:
              - resources:
                  requests:
                    memory: "?*"
                    cpu: "?*"
                  limits:
                    memory: "?*"
  - apiVersion: kyverno.io/v1
    kind: ClusterPolicy
    metadata:
      name: disallow-latest-tag
      annotations:
        policies.kyverno.io/title: Disallow Latest Tag
        policies.kyverno.io/category: Best Practices
        policies.kyverno.io/minversion: 1.6.0
        policies.kyverno.io/severity: medium
        policies.kyverno.io/subject: Pod 
    spec:
      validationFailureAction: Audit
      background: true
      rules:
      - name: require-image-tag
        match:
          any:
          - resources:
              kinds:
              - Pod
        validate:
          message: "An image tag is required."
          pattern:
            spec:
              containers:
              - image: "*:*"
      - name: validate-image-tag
        match:
          any:
          - resources:
              kinds:
              - Pod
        validate:
          message: "Using a mutable image tag e.g. 'latest' is not allowed."
          pattern:
            spec:
              containers:
              - image: "!*:latest"
  - apiVersion: kyverno.io/v1
    kind: ClusterPolicy
    metadata:
      name: sync-registry-credentials
    spec:
      rules:
      - name: sync-image-pull-secret
        match:
          any:
          - resources:
              kinds:
              - Namespace
        generate:
          apiVersion: v1
          kind: Secret
          name: registry-credentials
          namespace: "{{`{{request.object.metadata.name}}`}}"
          synchronize: true
          clone:
            namespace: default
            name: registry-credentials
  # - apiVersion: kyverno.io/v1
  #   kind: ClusterPolicy
  #   metadata:
  #     name: add-imagepullsecrets-for-containers-and-initcontainers
  #   spec:
  #     rules:
  #     - name: add-imagepullsecret
  #       match:
  #         any:
  #         - resources:
  #             kinds:
  #             - Pod
  #       preconditions:
  #         any:
  #         - key: "corp.reg.com"
  #           operator: AnyIn
  #           value: "{{ images.initContainers.*.registry || `[]` }}"
  #         - key: "corp.reg.com"     
  #           operator: AnyIn
  #           value: "{{ images.containers.*.registry }}"
  #       mutate:
  #         patchStrategicMerge:
  #           spec:
  #             imagePullSecrets:
  #             - name: registry-credentials

# -- API server behavior if the webhook fails to respond ('Ignore', 'Fail')
# For more info: https://kyverno.io/docs/writing-policies/policy-settings/
failurePolicy: Ignore

# -- Validation failure action (`Audit`, `Enforce`).
# For more info https://kyverno.io/docs/writing-policies/validate.
validationFailureAction: Audit

# -- Define validationFailureActionByPolicy for specific policies.
# Override the defined `validationFailureAction` with a individual validationFailureAction for individual Policies.
validationFailureActionByPolicy: {}
#  disallow-capabilities-strict: enforce
#  disallow-host-path: enforce
#  disallow-host-ports: enforce

# -- Define validationFailureActionOverrides for specific policies.
# The overrides for `all` will apply to all policies.
validationFailureActionOverrides:
  all: []
  # all:
  #   - action: audit
  #     namespaces:
  #       - ingress-nginx
  # disallow-host-path:
  #   - action: audit
  #     namespaces:
  #       - fluent

# -- Validate already existing resources.
# For more info https://kyverno.io/docs/writing-policies/validate.
validationAllowExistingViolations: true

# -- Exclude resources from individual policies.
# Policies with multiple rules can have individual rules excluded by using the name of the rule as the key in the `policyExclude` map.
policyExclude: {}
  # # Exclude resources from individual policies
  # disallow-host-path:
  #   any:
  #   - resources:
  #       kinds:
  #       - Pod
  #       namespaces:
  #       - fluent
  # # Policies with multiple rules can have individual rules excluded
  # adding-capabilities-strict:
  #   any:
  #   - resources:
  #       kinds:
  #       - Pod
  #       namespaces:
  #       - kube-system
# -- Add preconditions to individual policies.
# Policies with multiple rules can have individual rules excluded by using the name of the rule as the key in the `policyPreconditions` map.
policyPreconditions: {}
  # # Exclude resources from individual policies
  # require-run-as-non-root-user:
  #   all:
  #   - key: "{{ request.object.metadata.name }}"
  #     operator: NotEquals
  #     value: "dcgm-exporter*"
  # # Policies with multiple rules can have individual rules excluded
  # require-drop-all:
  #   any:
  #   - key: "{{ request.object.metadata.name }}"
  #     operator: NotEquals
  #     value: "dcgm-exporter*"
  # adding-capabilities-strict:
  #   all:
  #   - key: "{{ request.object.metadata.name }}"
  #     operator: NotEquals
  #     value: "dcgm-exporter*"

# -- Customize the target Pod controllers for the auto-generated rules. (Eg. `none`, `Deployment`, `DaemonSet,Deployment,StatefulSet`)
# For more info https://kyverno.io/docs/writing-policies/autogen/.
autogenControllers: ""

# -- Name override.
nameOverride:

# -- Additional labels.
customLabels: {}

# -- Policies background mode
background: true

# -- (bool) SkipBackgroundRequests bypasses admission requests that are sent by the background controller
skipBackgroundRequests: ~

# -- Kyverno version
# The default of "autodetect" will try to determine the currently installed version from the deployment
kyvernoVersion: autodetect
